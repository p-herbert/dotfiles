[user]
    name = p-herbert
    email = 11701411+p-herbert@users.noreply.github.com
[core]
    autocrlf = input
    safecrlf = true
    excludesfile = $HOME/.gitignore
    pager = diff-so-fancy | less --tabs=4 -RFX
[push]
    default = current
    followTags = true
[branch]
    autoSetupMerge = always
[color]
    ui = auto
[merge]
    tool = vimdiff
[mergetool]
    prompt = false
[url "ssh://git@github.com/"]
    insteadOf = https://github.com/
[alias]
    ##########
    a = "!f() { git add $(git status -s | cut -c4- | awk -v line=$1 'NR==line'); }; f"
    aa = add .
    ac = "!f() { git add $1 && git ci; }; f"
    ai = add -i
    ##########
    bi = bisect
    ##########
    bm = branch -m
    br = branch
    bu = branch -u
    brd = branch -d
    ##########
    dump = cat-file -p
    type = cat-file -t
    ##########
    co = checkout
    cob = checkout -b
    cod = checkout development
    com = checkout master
    ##########
    ci = commit
    ##########
    cl = clone
    ##########
    cp = cherry-pick
    ##########
    d = "!f() { git diff $(git status -s | cut -c4- | awk -v line=$1 'NR==line'); }; f"
    di = diff
    dc = diff --cached
    ds = diff --stat
    ##########
    f = "!f() { regex=${1}; file=${2}; git log -p -G"$regex" $file; }; f"
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lg = log --graph --abbrev-commit --decorate --date=short --all --pretty=format:'%C(yellow)%h%Creset %Cblue%ad%Creset %Cgreen%aN%Creset %s%C(bold yellow)%d%C(reset)'
    ##########
    m = merge
    ma = merge --abort
    mc = merge --continue
    mm = merge master
    ms = merge --skip
    ##########
    pl = pull
    plr = pull --rebase
    plum = pull upstream master
    prum = pull --rebase upstream master
    ##########
    ps = push
    pso = push origin
    pst = push --tags
    psom = push origin master
    ##########
    s = stash
    sa = "!f() { num=${1-0}; git stash apply stash@{$num}; }; f"
    sl = stash list
    sp = stash pop
    sw = "!f() { num=${1-0}; git stash show -p stash@{$num}; }; f"
    ##########
    ss = "!f() { git status -s | nl; }; f"
    st = status
    ##########
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = "!f() { num=${1-0}; git rebase --interactive HEAD~$num; }; f"
    rbs = rebase --skip
    ##########
    r = remote
    ra = remote add
    rr = remote rm
    rs = remote set-url
    rv = remote -v
    rw = remote show
    ##########
    re = reset
    rh = reset HEAD^
    reh = reset --hard HEAD^
    res = reset --soft HEAD^
    undo = "!f() { git reset HEAD $(git status -s | cut -c4- | awk -v line=$1 'NR==line'); }; f"
    ##########
    h = rev-parse HEAD
    hs = "!f() { num=${1-0}; git rev-parse HEAD~$num; }; f"
    ##########
    w = show
    wn = "!f() { num=${1-0}; git show $(git rev-parse HEAD~$num); }; f"
    ##########
    e = "!f() { $EDITOR $(git status -s | cut -c4- | awk -v line=${1-1} 'NR==line'); }; f"
    ##########

